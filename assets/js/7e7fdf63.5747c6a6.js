"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[254],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1471:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={id:"overview_usage",title:"Usage"},o=void 0,l={unversionedId:"overview/overview_usage",id:"overview/overview_usage",title:"Usage",description:"UrlDetector",source:"@site/docs/overview/overview_usage.md",sourceDirName:"overview",slug:"/overview/overview_usage",permalink:"/scurl-detector/overview/overview_usage",draft:!1,editUrl:"https://github.com/lambdaworks/scurl-detector/edit/main/website/docs/overview/overview_usage.md",tags:[],version:"current",frontMatter:{id:"overview_usage",title:"Usage"},sidebar:"overview_sidebar",previous:{title:"Overview",permalink:"/scurl-detector/overview/overview_index"},next:{title:"Example",permalink:"/scurl-detector/overview/overview_example"}},s={},c=[{value:"UrlDetector",id:"urldetector",level:2},{value:"Config",id:"config",level:2},{value:"UrlDetectorOptions",id:"urldetectoroptions",level:2},{value:"Extracting",id:"extracting",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"urldetector"},"UrlDetector"),(0,a.kt)("p",null,"To use the Scala URL Detector library, you need to import the ",(0,a.kt)("inlineCode",{parentName:"p"},"UrlDetector")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import io.lambdaworks.detection.UrlDetector\n")),(0,a.kt)("p",null,"When creating an instance of this class, you can optionally provide a ",(0,a.kt)("inlineCode",{parentName:"p"},"Config")," which affects the behavior of the detector:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"class UrlDetector(config: Config = Config())\n")),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," method is defined inside the companion object, so you can instantiate this class without using the ",(0,a.kt)("inlineCode",{parentName:"p"},"new")," keyword."),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Config")," is a case class in which you can specify the options in the form of ",(0,a.kt)("inlineCode",{parentName:"p"},"UrlDetectorOptions"),", as well as an allowlist and a denylist of type ",(0,a.kt)("inlineCode",{parentName:"p"},"List[String]"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"final case class Config(\n  options: UrlDetectorOptions = UrlDetectorOptions.Default,\n  allowlist: List[String] = Nil,\n  denylist: List[String] = Nil\n)\n")),(0,a.kt)("p",null,"Allowlist represents URLs which the detector is supposed to detect, while denylist specifies URLs which the detector should ignore.\nIf a value for a parameter is not specified, the above default value for it is used.\nYou can get the default ",(0,a.kt)("inlineCode",{parentName:"p"},"Config")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"Config.default")," as well."),(0,a.kt)("p",null,"You can create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Config")," from an existing one using the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Config")," methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def withOptions(options: UrlDetectorOptions): Config\n\ndef withAllowlist(urls: List[String]): Config\n\ndef withDenylist(urls: List[String]): Config \n")),(0,a.kt)("h2",{id:"urldetectoroptions"},"UrlDetectorOptions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"UrlDetectorOptions")," extends ",(0,a.kt)("inlineCode",{parentName:"p"},"StringEnumEntry")," from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lloydmeta/enumeratum"},"Enumeratum")," library. You can find all of the enumeration entries in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lambdaworks/scurl-detector/blob/main/src/main/scala/io/lambdaworks/detection/UrlDetectorOptions.scala"},"UrlDetectorOptions.scala")," file."),(0,a.kt)("h2",{id:"extracting"},"Extracting"),(0,a.kt)("p",null,"In order to extract URLs from a ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," using an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"UrlDetector"),", you need to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"extract")," method with that ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),", which will return ",(0,a.kt)("inlineCode",{parentName:"p"},"List[Url]"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def extract(content: String): List[Url]\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Url")," is a value class which has the following methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def host: String\n\ndef containedIn(urls: List[Url]): Boolean\n")),(0,a.kt)("p",null,"You can get the ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," representation of the URL with the ",(0,a.kt)("inlineCode",{parentName:"p"},"toString")," method, and there is also an ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," method defined in the companion object for constructing a ",(0,a.kt)("inlineCode",{parentName:"p"},"Url")," from a ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def apply(url: String): Url\n")))}u.isMDXComponent=!0}}]);